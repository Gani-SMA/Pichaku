name: Automated Database Backup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  BACKUP_RETENTION_DAYS: 30

jobs:
  backup:
    name: Backup Database
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create backup directory
        run: mkdir -p backups

      - name: Run backup script
        env:
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
          BACKUP_DIR: ./backups
          RETENTION_DAYS: ${{ env.BACKUP_RETENTION_DAYS }}
        run: |
          chmod +x scripts/backup-database.sh
          ./scripts/backup-database.sh

      - name: Upload backup to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backups/*.gz
          retention-days: ${{ env.BACKUP_RETENTION_DAYS }}

      - name: Upload to S3 (if configured)
        if: ${{ secrets.AWS_S3_BUCKET != '' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          aws s3 sync backups/ s3://$AWS_S3_BUCKET/backups/$(date +%Y/%m/%d)/ \
            --exclude "*" \
            --include "*.gz"

      - name: Send Slack notification on success
        if: success() && ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Database backup completed successfully",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Database Backup Successful*\n• Timestamp: ${{ github.run_number }}\n• Retention: ${{ env.BACKUP_RETENTION_DAYS }} days"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification on failure
        if: failure() && ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ Database backup failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Database Backup Failed*\n• Check workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  verify-backup:
    name: Verify Backup
    needs: backup
    runs-on: ubuntu-latest
    
    steps:
      - name: Download backup artifact
        uses: actions/download-artifact@v4
        with:
          name: database-backup-${{ github.run_number }}
          path: backups

      - name: Verify backup file exists
        run: |
          if [ -z "$(ls -A backups/*.gz 2>/dev/null)" ]; then
            echo "Error: No backup files found"
            exit 1
          fi
          echo "✓ Backup file verified"

      - name: Check backup file size
        run: |
          BACKUP_FILE=$(ls backups/*.gz | head -1)
          BACKUP_SIZE=$(stat -f%z "$BACKUP_FILE" 2>/dev/null || stat -c%s "$BACKUP_FILE")
          
          # Backup should be at least 1KB
          if [ $BACKUP_SIZE -lt 1024 ]; then
            echo "Error: Backup file is too small ($BACKUP_SIZE bytes)"
            exit 1
          fi
          
          echo "✓ Backup size: $BACKUP_SIZE bytes"
